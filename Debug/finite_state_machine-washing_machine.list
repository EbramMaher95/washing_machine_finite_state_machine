
finite_state_machine-washing_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080024fc  080024fc  000034fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ac  080025ac  00004098  2**0
                  CONTENTS
  4 .ARM          00000000  080025ac  080025ac  00004098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ac  080025ac  00004098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ac  080025ac  000035ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025b0  080025b0  000035b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080025b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000098  0800264c  00004098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800264c  00004204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b9d  00000000  00000000  000040c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141c  00000000  00000000  00007c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00009080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000038d  00000000  00000000  00009580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001701c  00000000  00000000  0000990d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d43  00000000  00000000  00020929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080125  00000000  00000000  0002766c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001688  00000000  00000000  000a77d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000a8e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080024e4 	.word	0x080024e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080024e4 	.word	0x080024e4

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b08d      	sub	sp, #52	@ 0x34
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fe29 	bl	8000da8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f96d 	bl	8000434 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f9b1 	bl	80004c0 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	// Initialize the LCD with 2 lines and 16 columns
	Alcd_Init(&lcd, 2, 16);
 800015e:	2210      	movs	r2, #16
 8000160:	2102      	movs	r1, #2
 8000162:	48ab      	ldr	r0, [pc, #684]	@ (8000410 <main+0x2c4>)
 8000164:	f000 fbd8 	bl	8000918 <Alcd_Init>

	// Clear the LCD
	Alcd_Clear(&lcd);
 8000168:	48a9      	ldr	r0, [pc, #676]	@ (8000410 <main+0x2c4>)
 800016a:	f000 fca9 	bl	8000ac0 <Alcd_Clear>

	//initializing the Keypad
	Keypad_Matrix_Init(&key);
 800016e:	48a9      	ldr	r0, [pc, #676]	@ (8000414 <main+0x2c8>)
 8000170:	f000 fdbb 	bl	8000cea <Keypad_Matrix_Init>

	// Display initial messages on the LCD
	Alcd_PutAt(&lcd, 0, 0, "program start");
 8000174:	48a8      	ldr	r0, [pc, #672]	@ (8000418 <main+0x2cc>)
 8000176:	f000 fcf7 	bl	8000b68 <Str_Len>
 800017a:	4603      	mov	r3, r0
 800017c:	b2db      	uxtb	r3, r3
 800017e:	9300      	str	r3, [sp, #0]
 8000180:	4ba5      	ldr	r3, [pc, #660]	@ (8000418 <main+0x2cc>)
 8000182:	2200      	movs	r2, #0
 8000184:	2100      	movs	r1, #0
 8000186:	48a2      	ldr	r0, [pc, #648]	@ (8000410 <main+0x2c4>)
 8000188:	f000 fc81 	bl	8000a8e <Alcd_PutAt_n>
	uint32_t current_tick;
	uint32_t filling_timeout;
	uint32_t rinsing_time;
	uint32_t spinning_time;
	int16_t error_number;
	state = filling_state;
 800018c:	230a      	movs	r3, #10
 800018e:	84fb      	strh	r3, [r7, #38]	@ 0x26

	filling_timeout = HAL_GetTick() + 10000;
 8000190:	f000 fe62 	bl	8000e58 <HAL_GetTick>
 8000194:	4603      	mov	r3, r0
 8000196:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800019a:	3310      	adds	r3, #16
 800019c:	623b      	str	r3, [r7, #32]
	rinsing_time = HAL_GetTick() + 50000;
 800019e:	f000 fe5b 	bl	8000e58 <HAL_GetTick>
 80001a2:	4603      	mov	r3, r0
 80001a4:	f503 4343 	add.w	r3, r3, #49920	@ 0xc300
 80001a8:	3350      	adds	r3, #80	@ 0x50
 80001aa:	61fb      	str	r3, [r7, #28]
	spinning_time = HAL_GetTick() + 60000;
 80001ac:	f000 fe54 	bl	8000e58 <HAL_GetTick>
 80001b0:	4603      	mov	r3, r0
 80001b2:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80001b6:	3360      	adds	r3, #96	@ 0x60
 80001b8:	61bb      	str	r3, [r7, #24]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//refresh the keypad
		Keypad_Matrix_Refresh(&key);
 80001ba:	4896      	ldr	r0, [pc, #600]	@ (8000414 <main+0x2c8>)
 80001bc:	f000 fda4 	bl	8000d08 <Keypad_Matrix_Refresh>

		current_tick = HAL_GetTick();
 80001c0:	f000 fe4a 	bl	8000e58 <HAL_GetTick>
 80001c4:	6178      	str	r0, [r7, #20]

		switch (state) {
 80001c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80001ca:	2b1e      	cmp	r3, #30
 80001cc:	f000 80a2 	beq.w	8000314 <main+0x1c8>
 80001d0:	2b1e      	cmp	r3, #30
 80001d2:	dcf2      	bgt.n	80001ba <main+0x6e>
 80001d4:	2b14      	cmp	r3, #20
 80001d6:	d058      	beq.n	800028a <main+0x13e>
 80001d8:	2b14      	cmp	r3, #20
 80001da:	dcee      	bgt.n	80001ba <main+0x6e>
 80001dc:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80001e0:	f000 80ec 	beq.w	80003bc <main+0x270>
 80001e4:	2b0a      	cmp	r3, #10
 80001e6:	d1e8      	bne.n	80001ba <main+0x6e>

		case filling_state: {

			//the water valve in on PIN13 on port C -> water valve is open (filling)
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ee:	488b      	ldr	r0, [pc, #556]	@ (800041c <main+0x2d0>)
 80001f0:	f001 f8c8 	bl	8001384 <HAL_GPIO_WritePin>

			Alcd_Clear(&lcd);
 80001f4:	4886      	ldr	r0, [pc, #536]	@ (8000410 <main+0x2c4>)
 80001f6:	f000 fc63 	bl	8000ac0 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "filling state");
 80001fa:	4889      	ldr	r0, [pc, #548]	@ (8000420 <main+0x2d4>)
 80001fc:	f000 fcb4 	bl	8000b68 <Str_Len>
 8000200:	4603      	mov	r3, r0
 8000202:	b2db      	uxtb	r3, r3
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4b86      	ldr	r3, [pc, #536]	@ (8000420 <main+0x2d4>)
 8000208:	2200      	movs	r2, #0
 800020a:	2100      	movs	r1, #0
 800020c:	4880      	ldr	r0, [pc, #512]	@ (8000410 <main+0x2c4>)
 800020e:	f000 fc3e 	bl	8000a8e <Alcd_PutAt_n>

			message = sprintf(str, "state = %d", state);
 8000212:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000216:	463b      	mov	r3, r7
 8000218:	4982      	ldr	r1, [pc, #520]	@ (8000424 <main+0x2d8>)
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fcb2 	bl	8001b84 <siprintf>
 8000220:	4603      	mov	r3, r0
 8000222:	827b      	strh	r3, [r7, #18]
			Alcd_PutAt_n(&lcd, 1, 0, str, message);
 8000224:	8a7b      	ldrh	r3, [r7, #18]
 8000226:	b2db      	uxtb	r3, r3
 8000228:	463a      	mov	r2, r7
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	4613      	mov	r3, r2
 800022e:	2200      	movs	r2, #0
 8000230:	2101      	movs	r1, #1
 8000232:	4877      	ldr	r0, [pc, #476]	@ (8000410 <main+0x2c4>)
 8000234:	f000 fc2b 	bl	8000a8e <Alcd_PutAt_n>

			//in case timeout and the filling not complete
			if ((current_tick >= filling_timeout)
					& !(Keypad_Matrix_Read_Key(&key, 4))) {
 8000238:	697a      	ldr	r2, [r7, #20]
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	429a      	cmp	r2, r3
 800023e:	bf2c      	ite	cs
 8000240:	2301      	movcs	r3, #1
 8000242:	2300      	movcc	r3, #0
 8000244:	b2dc      	uxtb	r4, r3
 8000246:	2104      	movs	r1, #4
 8000248:	4872      	ldr	r0, [pc, #456]	@ (8000414 <main+0x2c8>)
 800024a:	f000 fd95 	bl	8000d78 <Keypad_Matrix_Read_Key>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	bf0c      	ite	eq
 8000254:	2301      	moveq	r3, #1
 8000256:	2300      	movne	r3, #0
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4023      	ands	r3, r4
 800025c:	b2db      	uxtb	r3, r3
			if ((current_tick >= filling_timeout)
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <main+0x11c>
				state = error_state;
 8000262:	f64f 630c 	movw	r3, #65036	@ 0xfe0c
 8000266:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
			//in case of filling complete
			if (Keypad_Matrix_Read_Key(&key, 4)) {
 8000268:	2104      	movs	r1, #4
 800026a:	486a      	ldr	r0, [pc, #424]	@ (8000414 <main+0x2c8>)
 800026c:	f000 fd84 	bl	8000d78 <Keypad_Matrix_Read_Key>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	f000 80c5 	beq.w	8000402 <main+0x2b6>
				//stop the filling valve
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027e:	4867      	ldr	r0, [pc, #412]	@ (800041c <main+0x2d0>)
 8000280:	f001 f880 	bl	8001384 <HAL_GPIO_WritePin>

				//move to the rinsing state
				state = rinsing_state;
 8000284:	2314      	movs	r3, #20
 8000286:	84fb      	strh	r3, [r7, #38]	@ 0x26

			}

			break;
 8000288:	e0bb      	b.n	8000402 <main+0x2b6>
		}

		case rinsing_state: {
			Alcd_Clear(&lcd);
 800028a:	4861      	ldr	r0, [pc, #388]	@ (8000410 <main+0x2c4>)
 800028c:	f000 fc18 	bl	8000ac0 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "rinsing state");
 8000290:	4865      	ldr	r0, [pc, #404]	@ (8000428 <main+0x2dc>)
 8000292:	f000 fc69 	bl	8000b68 <Str_Len>
 8000296:	4603      	mov	r3, r0
 8000298:	b2db      	uxtb	r3, r3
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	4b62      	ldr	r3, [pc, #392]	@ (8000428 <main+0x2dc>)
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	485b      	ldr	r0, [pc, #364]	@ (8000410 <main+0x2c4>)
 80002a4:	f000 fbf3 	bl	8000a8e <Alcd_PutAt_n>
			message = sprintf(str, "state = %d", state);
 80002a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80002ac:	463b      	mov	r3, r7
 80002ae:	495d      	ldr	r1, [pc, #372]	@ (8000424 <main+0x2d8>)
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fc67 	bl	8001b84 <siprintf>
 80002b6:	4603      	mov	r3, r0
 80002b8:	827b      	strh	r3, [r7, #18]
			Alcd_PutAt_n(&lcd, 1, 0, str, message);
 80002ba:	8a7b      	ldrh	r3, [r7, #18]
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	463a      	mov	r2, r7
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	4613      	mov	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	4851      	ldr	r0, [pc, #324]	@ (8000410 <main+0x2c4>)
 80002ca:	f000 fbe0 	bl	8000a8e <Alcd_PutAt_n>

			//disable filling valve -> already done but to ensure the closure
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d4:	4851      	ldr	r0, [pc, #324]	@ (800041c <main+0x2d0>)
 80002d6:	f001 f855 	bl	8001384 <HAL_GPIO_WritePin>

			//enable the motor -> on PIN 14 PORT C
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002e0:	484e      	ldr	r0, [pc, #312]	@ (800041c <main+0x2d0>)
 80002e2:	f001 f84f 	bl	8001384 <HAL_GPIO_WritePin>

//check if water level is low
			if (!(Keypad_Matrix_Read_Key(&key, 4))) {
 80002e6:	2104      	movs	r1, #4
 80002e8:	484a      	ldr	r0, [pc, #296]	@ (8000414 <main+0x2c8>)
 80002ea:	f000 fd45 	bl	8000d78 <Keypad_Matrix_Read_Key>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d108      	bne.n	8000306 <main+0x1ba>
				//stop the filling valve
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fa:	4848      	ldr	r0, [pc, #288]	@ (800041c <main+0x2d0>)
 80002fc:	f001 f842 	bl	8001384 <HAL_GPIO_WritePin>

				//move to the error state
				state = error_state;
 8000300:	f64f 630c 	movw	r3, #65036	@ 0xfe0c
 8000304:	84fb      	strh	r3, [r7, #38]	@ 0x26

			}

			//check for the rinsing time is over
			if (current_tick >= rinsing_time) {
 8000306:	697a      	ldr	r2, [r7, #20]
 8000308:	69fb      	ldr	r3, [r7, #28]
 800030a:	429a      	cmp	r2, r3
 800030c:	d37b      	bcc.n	8000406 <main+0x2ba>
				//move to the next state
				state = spinning_state;
 800030e:	231e      	movs	r3, #30
 8000310:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}

			break;
 8000312:	e078      	b.n	8000406 <main+0x2ba>
		}

		case spinning_state: {

			Alcd_Clear(&lcd);
 8000314:	483e      	ldr	r0, [pc, #248]	@ (8000410 <main+0x2c4>)
 8000316:	f000 fbd3 	bl	8000ac0 <Alcd_Clear>
						Alcd_PutAt(&lcd, 0, 0, "spinning state");
 800031a:	4844      	ldr	r0, [pc, #272]	@ (800042c <main+0x2e0>)
 800031c:	f000 fc24 	bl	8000b68 <Str_Len>
 8000320:	4603      	mov	r3, r0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	4b41      	ldr	r3, [pc, #260]	@ (800042c <main+0x2e0>)
 8000328:	2200      	movs	r2, #0
 800032a:	2100      	movs	r1, #0
 800032c:	4838      	ldr	r0, [pc, #224]	@ (8000410 <main+0x2c4>)
 800032e:	f000 fbae 	bl	8000a8e <Alcd_PutAt_n>
						message = sprintf(str, "state = %d", state);
 8000332:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000336:	463b      	mov	r3, r7
 8000338:	493a      	ldr	r1, [pc, #232]	@ (8000424 <main+0x2d8>)
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fc22 	bl	8001b84 <siprintf>
 8000340:	4603      	mov	r3, r0
 8000342:	827b      	strh	r3, [r7, #18]
						Alcd_PutAt_n(&lcd, 1, 0, str, message);
 8000344:	8a7b      	ldrh	r3, [r7, #18]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	463a      	mov	r2, r7
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	4613      	mov	r3, r2
 800034e:	2200      	movs	r2, #0
 8000350:	2101      	movs	r1, #1
 8000352:	482f      	ldr	r0, [pc, #188]	@ (8000410 <main+0x2c4>)
 8000354:	f000 fb9b 	bl	8000a8e <Alcd_PutAt_n>

			//for spinning -> open drain valve -> PIN 15 PORT C
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800035e:	482f      	ldr	r0, [pc, #188]	@ (800041c <main+0x2d0>)
 8000360:	f001 f810 	bl	8001384 <HAL_GPIO_WritePin>

			//in case spining time is over and water level is high
			if ((current_tick >= spinning_time)
 8000364:	697a      	ldr	r2, [r7, #20]
 8000366:	69bb      	ldr	r3, [r7, #24]
 8000368:	429a      	cmp	r2, r3
 800036a:	bf2c      	ite	cs
 800036c:	2301      	movcs	r3, #1
 800036e:	2300      	movcc	r3, #0
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461c      	mov	r4, r3
					& ((Keypad_Matrix_Read_Key(&key, 4)))) {
 8000374:	2104      	movs	r1, #4
 8000376:	4827      	ldr	r0, [pc, #156]	@ (8000414 <main+0x2c8>)
 8000378:	f000 fcfe 	bl	8000d78 <Keypad_Matrix_Read_Key>
 800037c:	4603      	mov	r3, r0
 800037e:	4023      	ands	r3, r4
			if ((current_tick >= spinning_time)
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <main+0x23e>
				//move to the next state
				state = error_state;
 8000384:	f64f 630c 	movw	r3, #65036	@ 0xfe0c
 8000388:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}

			//check for the spinning time is over and water level is low
			if ((current_tick >= spinning_time)
					& (!(Keypad_Matrix_Read_Key(&key, 4)))) {
 800038a:	697a      	ldr	r2, [r7, #20]
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	429a      	cmp	r2, r3
 8000390:	bf2c      	ite	cs
 8000392:	2301      	movcs	r3, #1
 8000394:	2300      	movcc	r3, #0
 8000396:	b2dc      	uxtb	r4, r3
 8000398:	2104      	movs	r1, #4
 800039a:	481e      	ldr	r0, [pc, #120]	@ (8000414 <main+0x2c8>)
 800039c:	f000 fcec 	bl	8000d78 <Keypad_Matrix_Read_Key>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf0c      	ite	eq
 80003a6:	2301      	moveq	r3, #1
 80003a8:	2300      	movne	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4023      	ands	r3, r4
 80003ae:	b2db      	uxtb	r3, r3
			if ((current_tick >= spinning_time)
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d02a      	beq.n	800040a <main+0x2be>
				//move to the next state
				state = finished_state;
 80003b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
			break;
 80003ba:	e026      	b.n	800040a <main+0x2be>
		}

		case error_state: {

			Alcd_Clear(&lcd);
 80003bc:	4814      	ldr	r0, [pc, #80]	@ (8000410 <main+0x2c4>)
 80003be:	f000 fb7f 	bl	8000ac0 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "ERROR!!!");
 80003c2:	481b      	ldr	r0, [pc, #108]	@ (8000430 <main+0x2e4>)
 80003c4:	f000 fbd0 	bl	8000b68 <Str_Len>
 80003c8:	4603      	mov	r3, r0
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <main+0x2e4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	480e      	ldr	r0, [pc, #56]	@ (8000410 <main+0x2c4>)
 80003d6:	f000 fb5a 	bl	8000a8e <Alcd_PutAt_n>
			message = sprintf(str, "state = %d", state);
 80003da:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80003de:	463b      	mov	r3, r7
 80003e0:	4910      	ldr	r1, [pc, #64]	@ (8000424 <main+0x2d8>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fbce 	bl	8001b84 <siprintf>
 80003e8:	4603      	mov	r3, r0
 80003ea:	827b      	strh	r3, [r7, #18]
			Alcd_PutAt_n(&lcd, 1, 0, str, message);
 80003ec:	8a7b      	ldrh	r3, [r7, #18]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	463a      	mov	r2, r7
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	4613      	mov	r3, r2
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <main+0x2c4>)
 80003fc:	f000 fb47 	bl	8000a8e <Alcd_PutAt_n>

			break;
 8000400:	e004      	b.n	800040c <main+0x2c0>
			break;
 8000402:	bf00      	nop
 8000404:	e6d9      	b.n	80001ba <main+0x6e>
			break;
 8000406:	bf00      	nop
 8000408:	e6d7      	b.n	80001ba <main+0x6e>
			break;
 800040a:	bf00      	nop
		Keypad_Matrix_Refresh(&key);
 800040c:	e6d5      	b.n	80001ba <main+0x6e>
 800040e:	bf00      	nop
 8000410:	20000000 	.word	0x20000000
 8000414:	20000020 	.word	0x20000020
 8000418:	080024fc 	.word	0x080024fc
 800041c:	40011000 	.word	0x40011000
 8000420:	0800250c 	.word	0x0800250c
 8000424:	0800251c 	.word	0x0800251c
 8000428:	08002528 	.word	0x08002528
 800042c:	08002538 	.word	0x08002538
 8000430:	08002548 	.word	0x08002548

08000434 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b090      	sub	sp, #64	@ 0x40
 8000438:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	2228      	movs	r2, #40	@ 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fbbe 	bl	8001bc4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000464:	2301      	movs	r3, #1
 8000466:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000468:	2302      	movs	r3, #2
 800046a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000470:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000472:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000476:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000478:	f107 0318 	add.w	r3, r7, #24
 800047c:	4618      	mov	r0, r3
 800047e:	f000 ff99 	bl	80013b4 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x58>
		Error_Handler();
 8000488:	f000 f866 	bl	8000558 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	2302      	movs	r3, #2
 8000492:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000498:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800049c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2102      	movs	r1, #2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fa06 	bl	80018b8 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x82>
		Error_Handler();
 80004b2:	f000 f851 	bl	8000558 <Error_Handler>
	}
}
 80004b6:	bf00      	nop
 80004b8:	3740      	adds	r7, #64	@ 0x40
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000550 <MX_GPIO_Init+0x90>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0310 	and.w	r3, r3, #16
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <MX_GPIO_Init+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a17      	ldr	r2, [pc, #92]	@ (8000550 <MX_GPIO_Init+0x90>)
 80004f2:	f043 0320 	orr.w	r3, r3, #32
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <MX_GPIO_Init+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_GPIO_Init+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a11      	ldr	r2, [pc, #68]	@ (8000550 <MX_GPIO_Init+0x90>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_GPIO_Init+0x90>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000522:	480c      	ldr	r0, [pc, #48]	@ (8000554 <MX_GPIO_Init+0x94>)
 8000524:	f000 ff2e 	bl	8001384 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC14 PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000528:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800052c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <MX_GPIO_Init+0x94>)
 8000542:	f000 fd9b 	bl	800107c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40011000 	.word	0x40011000

08000558 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <Error_Handler+0x8>

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	@ (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <NMI_Handler+0x4>

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 fc0c 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <_sbrk+0x5c>)
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <_sbrk+0x60>)
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <_sbrk+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d102      	bne.n	8000642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <_sbrk+0x64>)
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <_sbrk+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	429a      	cmp	r2, r3
 800064e:	d207      	bcs.n	8000660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000650:	f001 fac0 	bl	8001bd4 <__errno>
 8000654:	4603      	mov	r3, r0
 8000656:	220c      	movs	r2, #12
 8000658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	e009      	b.n	8000674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000666:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <_sbrk+0x64>)
 8000670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20005000 	.word	0x20005000
 8000680:	00000400 	.word	0x00000400
 8000684:	200000b4 	.word	0x200000b4
 8000688:	20000208 	.word	0x20000208

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000698:	f7ff fff8 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800069e:	490c      	ldr	r1, [pc, #48]	@ (80006d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a09      	ldr	r2, [pc, #36]	@ (80006d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006b4:	4c09      	ldr	r4, [pc, #36]	@ (80006dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c2:	f001 fa8d 	bl	8001be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fd41 	bl	800014c <main>
  bx lr
 80006ca:	4770      	bx	lr
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80006d4:	080025b4 	.word	0x080025b4
  ldr r2, =_sbss
 80006d8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80006dc:	20000204 	.word	0x20000204

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <DWT_Delay_Init+0x58>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <DWT_Delay_Init+0x58>)
 80006ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006f2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <DWT_Delay_Init+0x58>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a10      	ldr	r2, [pc, #64]	@ (800073c <DWT_Delay_Init+0x58>)
 80006fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006fe:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <DWT_Delay_Init+0x5c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <DWT_Delay_Init+0x5c>)
 8000706:	f023 0301 	bic.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <DWT_Delay_Init+0x5c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <DWT_Delay_Init+0x5c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <DWT_Delay_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800071e:	bf00      	nop
     __ASM volatile ("NOP");
 8000720:	bf00      	nop
  __ASM volatile ("NOP");
 8000722:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <DWT_Delay_Init+0x5c>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800072c:	2300      	movs	r3, #0
 800072e:	e000      	b.n	8000732 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000730:	2301      	movs	r3, #1
  }
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000edf0 	.word	0xe000edf0
 8000740:	e0001000 	.word	0xe0001000

08000744 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <DWT_Delay_us+0x40>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000752:	f001 f9ef 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0b      	ldr	r2, [pc, #44]	@ (8000788 <DWT_Delay_us+0x44>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	0c9b      	lsrs	r3, r3, #18
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000768:	bf00      	nop
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <DWT_Delay_us+0x40>)
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d3f8      	bcc.n	800076a <DWT_Delay_us+0x26>
		;
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e0001000 	.word	0xe0001000
 8000788:	431bde83 	.word	0x431bde83

0800078c <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffd3 	bl	8000744 <DWT_Delay_us>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7a1b      	ldrb	r3, [r3, #8]
 80007bc:	4619      	mov	r1, r3
 80007be:	230f      	movs	r3, #15
 80007c0:	408b      	lsls	r3, r1
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	400a      	ands	r2, r1
 80007cc:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	7a09      	ldrb	r1, [r1, #8]
 80007da:	408b      	lsls	r3, r1
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	60da      	str	r2, [r3, #12]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6958      	ldr	r0, [r3, #20]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	8b1b      	ldrh	r3, [r3, #24]
 8000804:	78fa      	ldrb	r2, [r7, #3]
 8000806:	4619      	mov	r1, r3
 8000808:	f000 fdbc 	bl	8001384 <HAL_GPIO_WritePin>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	8a1b      	ldrh	r3, [r3, #16]
 8000828:	78fa      	ldrb	r2, [r7, #3]
 800082a:	4619      	mov	r1, r3
 800082c:	f000 fdaa 	bl	8001384 <HAL_GPIO_WritePin>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	8b1b      	ldrh	r3, [r3, #24]
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	2301      	movs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fc08 	bl	800107c <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8a1b      	ldrh	r3, [r3, #16]
 8000870:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	f107 0208 	add.w	r2, r7, #8
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fbfd 	bl	800107c <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	7a1b      	ldrb	r3, [r3, #8]
 8000886:	461a      	mov	r2, r3
 8000888:	230f      	movs	r3, #15
 800088a:	4093      	lsls	r3, r2
 800088c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f107 0208 	add.w	r2, r7, #8
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fbef 	bl	800107c <HAL_GPIO_Init>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	460b      	mov	r3, r1
 80008b0:	70fb      	strb	r3, [r7, #3]
 80008b2:	4613      	mov	r3, r2
 80008b4:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	4619      	mov	r1, r3
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff98 	bl	80007f0 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4619      	mov	r1, r3
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff6c 	bl	80007a6 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 80008ce:	2101      	movs	r1, #1
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff9f 	bl	8000814 <EN_SET>
 80008d6:	200a      	movs	r0, #10
 80008d8:	f7ff ff58 	bl	800078c <usDelay>
 80008dc:	2100      	movs	r1, #0
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ff98 	bl	8000814 <EN_SET>
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f7ff ff51 	bl	800078c <usDelay>
	;
	Write_HalfByte(lcd, value);
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	4619      	mov	r1, r3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff59 	bl	80007a6 <Write_HalfByte>
	PulseEn
 80008f4:	2101      	movs	r1, #1
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff8c 	bl	8000814 <EN_SET>
 80008fc:	200a      	movs	r0, #10
 80008fe:	f7ff ff45 	bl	800078c <usDelay>
 8000902:	2100      	movs	r1, #0
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff85 	bl	8000814 <EN_SET>
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f7ff ff3e 	bl	800078c <usDelay>
	;
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
 8000924:	4613      	mov	r3, r2
 8000926:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000928:	f7ff fedc 	bl	80006e4 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff83 	bl	8000838 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2240      	movs	r2, #64	@ 0x40
 800093c:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	78ba      	ldrb	r2, [r7, #2]
 8000942:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000944:	78bb      	ldrb	r3, [r7, #2]
 8000946:	3340      	adds	r3, #64	@ 0x40
 8000948:	b2da      	uxtb	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff4d 	bl	80007f0 <RS_SET>
	EN_SET(lcd, 0);
 8000956:	2100      	movs	r1, #0
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff5b 	bl	8000814 <EN_SET>
	usDelay(50000);
 800095e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000962:	f7ff ff13 	bl	800078c <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e018      	b.n	800099e <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 800096c:	2103      	movs	r1, #3
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff19 	bl	80007a6 <Write_HalfByte>
		PulseEn
 8000974:	2101      	movs	r1, #1
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff4c 	bl	8000814 <EN_SET>
 800097c:	200a      	movs	r0, #10
 800097e:	f7ff ff05 	bl	800078c <usDelay>
 8000982:	2100      	movs	r1, #0
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff45 	bl	8000814 <EN_SET>
 800098a:	2064      	movs	r0, #100	@ 0x64
 800098c:	f7ff fefe 	bl	800078c <usDelay>
		;
		usDelay(4500);
 8000990:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000994:	f7ff fefa 	bl	800078c <usDelay>
	for (x = 0; x < 2; x++) {
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	3301      	adds	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d9e3      	bls.n	800096c <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80009a4:	2103      	movs	r1, #3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fefd 	bl	80007a6 <Write_HalfByte>
	PulseEn
 80009ac:	2101      	movs	r1, #1
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ff30 	bl	8000814 <EN_SET>
 80009b4:	200a      	movs	r0, #10
 80009b6:	f7ff fee9 	bl	800078c <usDelay>
 80009ba:	2100      	movs	r1, #0
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff29 	bl	8000814 <EN_SET>
 80009c2:	2064      	movs	r0, #100	@ 0x64
 80009c4:	f7ff fee2 	bl	800078c <usDelay>
	;
	usDelay(150);
 80009c8:	2096      	movs	r0, #150	@ 0x96
 80009ca:	f7ff fedf 	bl	800078c <usDelay>
	Write_HalfByte(lcd, 0x02);
 80009ce:	2102      	movs	r1, #2
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fee8 	bl	80007a6 <Write_HalfByte>
	PulseEn
 80009d6:	2101      	movs	r1, #1
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff1b 	bl	8000814 <EN_SET>
 80009de:	200a      	movs	r0, #10
 80009e0:	f7ff fed4 	bl	800078c <usDelay>
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff14 	bl	8000814 <EN_SET>
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f7ff fecd 	bl	800078c <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 80009f2:	2228      	movs	r2, #40	@ 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff55 	bl	80008a6 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	2101      	movs	r1, #1
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f86d 	bl	8000ae2 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f859 	bl	8000ac0 <Alcd_Clear>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	70fb      	strb	r3, [r7, #3]
 8000a22:	4613      	mov	r3, r2
 8000a24:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	7e9a      	ldrb	r2, [r3, #26]
 8000a2e:	78bb      	ldrb	r3, [r7, #2]
 8000a30:	4413      	add	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff2f 	bl	80008a6 <Alcd_SendByte>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	e00b      	b.n	8000a7c <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2101      	movs	r1, #1
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff ff18 	bl	80008a6 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	75fb      	strb	r3, [r7, #23]
 8000a7c:	7dfa      	ldrb	r2, [r7, #23]
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3ef      	bcc.n	8000a64 <Alcd_Put_n+0x14>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000aa0:	7aba      	ldrb	r2, [r7, #10]
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff ffb5 	bl	8000a16 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000aac:	7e3b      	ldrb	r3, [r7, #24]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff ffcc 	bl	8000a50 <Alcd_Put_n>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2100      	movs	r1, #0
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff feea 	bl	80008a6 <Alcd_SendByte>
	usDelay(2000);
 8000ad2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad6:	f7ff fe59 	bl	800078c <usDelay>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	4608      	mov	r0, r1
 8000aec:	4611      	mov	r1, r2
 8000aee:	461a      	mov	r2, r3
 8000af0:	4603      	mov	r3, r0
 8000af2:	70fb      	strb	r3, [r7, #3]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70bb      	strb	r3, [r7, #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7f9b      	ldrb	r3, [r3, #30]
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 8000b16:	78bb      	ldrb	r3, [r7, #2]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d006      	beq.n	8000b2a <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7f9b      	ldrb	r3, [r3, #30]
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 8000b2a:	787b      	ldrb	r3, [r7, #1]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7f9b      	ldrb	r3, [r3, #30]
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7f9b      	ldrb	r3, [r3, #30]
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7f9b      	ldrb	r3, [r3, #30]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fea3 	bl	80008a6 <Alcd_SendByte>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8000b74:	e002      	b.n	8000b7c <Str_Len+0x14>
		len++;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f6      	bne.n	8000b76 <Str_Len+0xe>
	}
	return len;
 8000b88:	68fb      	ldr	r3, [r7, #12]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <Hardware_intialize>:
#include "Matrix_Keypad.h"
/// @fn void Hardware_intialize(Keypad_Matrix*)
/// @brief
///
/// @param kp
static void Hardware_intialize(Keypad_Matrix *kp) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GP = {
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	2301      	movs	r3, #1
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]

	.Mode = GPIO_MODE_OUTPUT_PP, .Speed = GPIO_SPEED_LOW,

	};

	uint32_t Pins = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int x = 0; x < kp->Row; x++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	e00e      	b.n	8000bda <Hardware_intialize+0x46>

		Pins |= (1 << ((kp->Row_Start_Pin) + x));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int x = 0; x < kp->Row; x++) {
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	4293      	cmp	r3, r2
 8000be4:	dbea      	blt.n	8000bbc <Hardware_intialize+0x28>
	}

	GP.Pin = Pins;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(kp->Row_Port, &GP);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f107 020c 	add.w	r2, r7, #12
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fa41 	bl	800107c <HAL_GPIO_Init>

	kp->Output_Mask = Pins;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfe:	619a      	str	r2, [r3, #24]

	GP.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
	GP.Pull = GPIO_PULLDOWN;
 8000c04:	2302      	movs	r3, #2
 8000c06:	617b      	str	r3, [r7, #20]

	Pins = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int x = 0; x < kp->Col; x++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	e00e      	b.n	8000c30 <Hardware_intialize+0x9c>

		Pins |= (1 << ((kp->Col_Start_Pin) + x));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7c1b      	ldrb	r3, [r3, #16]
 8000c16:	461a      	mov	r2, r3
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	4313      	orrs	r3, r2
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int x = 0; x < kp->Col; x++) {
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	461a      	mov	r2, r3
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	dbea      	blt.n	8000c12 <Hardware_intialize+0x7e>
	}

	GP.Pin = Pins;
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(kp->Col_Port, &GP);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f107 020c 	add.w	r2, r7, #12
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fa16 	bl	800107c <HAL_GPIO_Init>

	kp->Input_Mask = Pins;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c54:	615a      	str	r2, [r3, #20]

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <Hardware_Generate_Delay>:

/// @fn void Hardware_Generate_Delay(uint16_t)
/// @brief
///
/// @param delay
static void Hardware_Generate_Delay(uint16_t delay) {
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(delay);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f8fe 	bl	8000e6c <HAL_Delay>

}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Hardware_Get_Inputs>:

static uint8_t Hardware_Get_Inputs(Keypad_Matrix *kp) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

	uint32_t m = kp->Col_Port->IDR & kp->Input_Mask;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]

	m = (m >> (kp->Col_Start_Pin));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7c1b      	ldrb	r3, [r3, #16]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]

	return (uint8_t) m;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	b2db      	uxtb	r3, r3

}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <Hardware_Set_outputs>:

static void Hardware_Set_outputs(Keypad_Matrix *kp, uint8_t status) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]

	kp->Row_Port->ODR &= ~(kp->Output_Mask);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	68d9      	ldr	r1, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	60da      	str	r2, [r3, #12]

	kp->Row_Port->ODR |= ((uint32_t) status) << (kp->Row_Start_Pin);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	68d9      	ldr	r1, [r3, #12]
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	7a12      	ldrb	r2, [r2, #8]
 8000cd4:	fa03 f202 	lsl.w	r2, r3, r2
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	60da      	str	r2, [r3, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <Keypad_Matrix_Init>:

void Keypad_Matrix_Init(Keypad_Matrix *kp) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]

	Hardware_intialize(kp);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff4e 	bl	8000b94 <Hardware_intialize>

	Hardware_Set_outputs(kp, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffd4 	bl	8000ca8 <Hardware_Set_outputs>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Keypad_Matrix_Refresh>:

/// @fn void Keypad_Matrix_Refresh(Keypad_Matrix*)
/// @brief
///
/// @param kp
void Keypad_Matrix_Refresh(Keypad_Matrix *kp) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	uint8_t scan = 0b00000001, x;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]

	kp->Button_Status = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	709a      	strb	r2, [r3, #2]

	for (x = 0; x < kp->Row; x++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	e021      	b.n	8000d64 <Keypad_Matrix_Refresh+0x5c>

		Hardware_Set_outputs(kp, scan);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ffbf 	bl	8000ca8 <Hardware_Set_outputs>

		Hardware_Generate_Delay(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff97 	bl	8000c5e <Hardware_Generate_Delay>

		kp->Button_Status |= (Hardware_Get_Inputs(kp) << (x * (kp->Col)));
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ffa1 	bl	8000c78 <Hardware_Get_Inputs>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	7bbb      	ldrb	r3, [r7, #14]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	7852      	ldrb	r2, [r2, #1]
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4099      	lsls	r1, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	789b      	ldrb	r3, [r3, #2]
 8000d4a:	b25a      	sxtb	r2, r3
 8000d4c:	b24b      	sxtb	r3, r1
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	709a      	strb	r2, [r3, #2]

		scan = scan << 1;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
	for (x = 0; x < kp->Row; x++) {
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	3301      	adds	r3, #1
 8000d62:	73bb      	strb	r3, [r7, #14]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	7bba      	ldrb	r2, [r7, #14]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3d8      	bcc.n	8000d20 <Keypad_Matrix_Refresh+0x18>
	}

}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <Keypad_Matrix_Read_Key>:

uint8_t Keypad_Matrix_Read_Key(Keypad_Matrix *kp, uint8_t key) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]

	if (kp->Button_Status & (1 << (key))) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	789b      	ldrb	r3, [r3, #2]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	fa42 f303 	asr.w	r3, r2, r3
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <Keypad_Matrix_Read_Key+0x24>
		return 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <Keypad_Matrix_Read_Key+0x26>
	}

	else {
		return 0;
 8000d9c:	2300      	movs	r3, #0
	}

}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f92b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fbce 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f935 	bl	8001062 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000003c 	.word	0x2000003c
 8000e2c:	20000044 	.word	0x20000044
 8000e30:	20000040 	.word	0x20000040

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000044 	.word	0x20000044
 8000e54:	200000b8 	.word	0x200000b8

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200000b8 	.word	0x200000b8

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000044 	.word	0x20000044

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff90 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff49 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b08b      	sub	sp, #44	@ 0x2c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e169      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001090:	2201      	movs	r2, #1
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8158 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a9a      	ldr	r2, [pc, #616]	@ (800131c <HAL_GPIO_Init+0x2a0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d05e      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010b8:	4a98      	ldr	r2, [pc, #608]	@ (800131c <HAL_GPIO_Init+0x2a0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d875      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010be:	4a98      	ldr	r2, [pc, #608]	@ (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d058      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010c4:	4a96      	ldr	r2, [pc, #600]	@ (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d86f      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ca:	4a96      	ldr	r2, [pc, #600]	@ (8001324 <HAL_GPIO_Init+0x2a8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d052      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010d0:	4a94      	ldr	r2, [pc, #592]	@ (8001324 <HAL_GPIO_Init+0x2a8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d869      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010d6:	4a94      	ldr	r2, [pc, #592]	@ (8001328 <HAL_GPIO_Init+0x2ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d04c      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010dc:	4a92      	ldr	r2, [pc, #584]	@ (8001328 <HAL_GPIO_Init+0x2ac>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d863      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010e2:	4a92      	ldr	r2, [pc, #584]	@ (800132c <HAL_GPIO_Init+0x2b0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d046      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010e8:	4a90      	ldr	r2, [pc, #576]	@ (800132c <HAL_GPIO_Init+0x2b0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d85d      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d82a      	bhi.n	8001148 <HAL_GPIO_Init+0xcc>
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d859      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010f6:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <HAL_GPIO_Init+0x80>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001151 	.word	0x08001151
 8001104:	08001163 	.word	0x08001163
 8001108:	080011a5 	.word	0x080011a5
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	080011ab 	.word	0x080011ab
 8001134:	080011ab 	.word	0x080011ab
 8001138:	080011ab 	.word	0x080011ab
 800113c:	080011ab 	.word	0x080011ab
 8001140:	08001159 	.word	0x08001159
 8001144:	0800116d 	.word	0x0800116d
 8001148:	4a79      	ldr	r2, [pc, #484]	@ (8001330 <HAL_GPIO_Init+0x2b4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e02c      	b.n	80011aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e029      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e024      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e01f      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	330c      	adds	r3, #12
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e01a      	b.n	80011ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117e:	2304      	movs	r3, #4
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e013      	b.n	80011ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	611a      	str	r2, [r3, #16]
          break;
 8001196:	e009      	b.n	80011ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	615a      	str	r2, [r3, #20]
          break;
 80011a2:	e003      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x130>
          break;
 80011aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	@ 0xff
 80011b0:	d801      	bhi.n	80011b6 <HAL_GPIO_Init+0x13a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_Init+0x13e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	@ 0xff
 80011c0:	d802      	bhi.n	80011c8 <HAL_GPIO_Init+0x14c>
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x152>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ca:	3b08      	subs	r3, #8
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	210f      	movs	r1, #15
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b1 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001334 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a4c      	ldr	r2, [pc, #304]	@ (8001334 <HAL_GPIO_Init+0x2b8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_GPIO_Init+0x2b8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001214:	4a48      	ldr	r2, [pc, #288]	@ (8001338 <HAL_GPIO_Init+0x2bc>)
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a40      	ldr	r2, [pc, #256]	@ (800133c <HAL_GPIO_Init+0x2c0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <HAL_GPIO_Init+0x2c4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3e      	ldr	r2, [pc, #248]	@ (8001344 <HAL_GPIO_Init+0x2c8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3d      	ldr	r2, [pc, #244]	@ (8001348 <HAL_GPIO_Init+0x2cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1e0>
 8001258:	2303      	movs	r3, #3
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 800125c:	2304      	movs	r3, #4
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001268:	2300      	movs	r3, #0
 800126a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127a:	492f      	ldr	r1, [pc, #188]	@ (8001338 <HAL_GPIO_Init+0x2bc>)
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	492c      	ldr	r1, [pc, #176]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012a2:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4928      	ldr	r1, [pc, #160]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	4922      	ldr	r1, [pc, #136]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	60cb      	str	r3, [r1, #12]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	491e      	ldr	r1, [pc, #120]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4918      	ldr	r1, [pc, #96]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4914      	ldr	r1, [pc, #80]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d021      	beq.n	8001350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	490e      	ldr	r1, [pc, #56]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e021      	b.n	800135e <HAL_GPIO_Init+0x2e2>
 800131a:	bf00      	nop
 800131c:	10320000 	.word	0x10320000
 8001320:	10310000 	.word	0x10310000
 8001324:	10220000 	.word	0x10220000
 8001328:	10210000 	.word	0x10210000
 800132c:	10120000 	.word	0x10120000
 8001330:	10110000 	.word	0x10110000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011000 	.word	0x40011000
 8001348:	40011400 	.word	0x40011400
 800134c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_GPIO_Init+0x304>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4909      	ldr	r1, [pc, #36]	@ (8001380 <HAL_GPIO_Init+0x304>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f47f ae8e 	bne.w	8001090 <HAL_GPIO_Init+0x14>
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	372c      	adds	r7, #44	@ 0x2c
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e272      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8087 	beq.w	80014e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d4:	4b92      	ldr	r3, [pc, #584]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d00c      	beq.n	80013fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d112      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
 80013ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f8:	d10b      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b89      	ldr	r3, [pc, #548]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d06c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x12c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d168      	bne.n	80014e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e24c      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x76>
 800141c:	4b80      	ldr	r3, [pc, #512]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a7f      	ldr	r2, [pc, #508]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e02e      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b7b      	ldr	r3, [pc, #492]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7a      	ldr	r2, [pc, #488]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b78      	ldr	r3, [pc, #480]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a77      	ldr	r2, [pc, #476]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0xbc>
 8001456:	4b72      	ldr	r3, [pc, #456]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a71      	ldr	r2, [pc, #452]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b6f      	ldr	r3, [pc, #444]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001470:	4b6b      	ldr	r3, [pc, #428]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6a      	ldr	r2, [pc, #424]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b68      	ldr	r3, [pc, #416]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a67      	ldr	r2, [pc, #412]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001486:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fce2 	bl	8000e58 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcde 	bl	8000e58 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	@ 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e200      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xe4>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fcce 	bl	8000e58 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fcca 	bl	8000e58 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	@ 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1ec      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x10c>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014fa:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b08      	cmp	r3, #8
 8001504:	d11c      	bne.n	8001540 <HAL_RCC_OscConfig+0x18c>
 8001506:	4b46      	ldr	r3, [pc, #280]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e1c0      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b3d      	ldr	r3, [pc, #244]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4939      	ldr	r1, [pc, #228]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	e03a      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001548:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fc83 	bl	8000e58 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fc7f 	bl	8000e58 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1a1      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4927      	ldr	r1, [pc, #156]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fc62 	bl	8000e58 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fc5e 	bl	8000e58 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e180      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03a      	beq.n	8001638 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fc42 	bl	8000e58 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc3e 	bl	8000e58 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e160      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 faa6 	bl	8001b48 <RCC_Delay>
 80015fc:	e01c      	b.n	8001638 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fc28 	bl	8000e58 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160a:	e00f      	b.n	800162c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fc24 	bl	8000e58 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d908      	bls.n	800162c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e146      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	42420000 	.word	0x42420000
 8001628:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b92      	ldr	r3, [pc, #584]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e9      	bne.n	800160c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a6 	beq.w	8001792 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b8b      	ldr	r3, [pc, #556]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b88      	ldr	r3, [pc, #544]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a87      	ldr	r2, [pc, #540]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b85      	ldr	r3, [pc, #532]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166e:	2301      	movs	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b82      	ldr	r3, [pc, #520]	@ (800187c <HAL_RCC_OscConfig+0x4c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <HAL_RCC_OscConfig+0x4c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7e      	ldr	r2, [pc, #504]	@ (800187c <HAL_RCC_OscConfig+0x4c8>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7ff fbe5 	bl	8000e58 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fbe1 	bl	8000e58 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	@ 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e103      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b75      	ldr	r3, [pc, #468]	@ (800187c <HAL_RCC_OscConfig+0x4c8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x312>
 80016b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e02d      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x334>
 80016ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a69      	ldr	r2, [pc, #420]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	4b67      	ldr	r3, [pc, #412]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a66      	ldr	r2, [pc, #408]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	e01c      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x356>
 80016f0:	4b61      	ldr	r3, [pc, #388]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a60      	ldr	r2, [pc, #384]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a5d      	ldr	r2, [pc, #372]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 800170a:	4b5b      	ldr	r3, [pc, #364]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a5a      	ldr	r2, [pc, #360]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b58      	ldr	r3, [pc, #352]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a57      	ldr	r2, [pc, #348]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d015      	beq.n	8001756 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb95 	bl	8000e58 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb91 	bl	8000e58 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0b1      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ee      	beq.n	8001732 <HAL_RCC_OscConfig+0x37e>
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb7f 	bl	8000e58 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fb7b 	bl	8000e58 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e09b      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	4b40      	ldr	r3, [pc, #256]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d105      	bne.n	8001792 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001786:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a3b      	ldr	r2, [pc, #236]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8087 	beq.w	80018aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179c:	4b36      	ldr	r3, [pc, #216]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d061      	beq.n	800186c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d146      	bne.n	800183e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b0:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb4f 	bl	8000e58 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fb4b 	bl	8000e58 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e06d      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e6:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4921      	ldr	r1, [pc, #132]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a19      	ldr	r1, [r3, #32]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	430b      	orrs	r3, r1
 800180a:	491b      	ldr	r1, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb1f 	bl	8000e58 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff fb1b 	bl	8000e58 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e03d      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x46a>
 800183c:	e035      	b.n	80018aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb08 	bl	8000e58 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb04 	bl	8000e58 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e026      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x498>
 800186a:	e01e      	b.n	80018aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e019      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
 8001880:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_OscConfig+0x500>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	429a      	cmp	r2, r3
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d0      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d910      	bls.n	80018fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b67      	ldr	r3, [pc, #412]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0207 	bic.w	r2, r3, #7
 80018e2:	4965      	ldr	r1, [pc, #404]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a58      	ldr	r2, [pc, #352]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800191e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a52      	ldr	r2, [pc, #328]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d040      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d115      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b41      	ldr	r3, [pc, #260]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e073      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4936      	ldr	r1, [pc, #216]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a8:	f7ff fa56 	bl	8000e58 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7ff fa52 	bl	8000e58 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e053      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1eb      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d210      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0207 	bic.w	r2, r3, #7
 80019ee:	4922      	ldr	r1, [pc, #136]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1cc>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_ClockConfig+0x1d0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f9b4 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08002554 	.word	0x08002554
 8001a84:	2000003c 	.word	0x2000003c
 8001a88:	20000040 	.word	0x20000040

08001a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x30>
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8001aba:	e027      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001abe:	613b      	str	r3, [r7, #16]
      break;
 8001ac0:	e027      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	0c9b      	lsrs	r3, r3, #18
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	4a17      	ldr	r2, [pc, #92]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d010      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	0c5b      	lsrs	r3, r3, #17
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aee:	fb03 f202 	mul.w	r2, r3, r2
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e004      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a0c      	ldr	r2, [pc, #48]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	613b      	str	r3, [r7, #16]
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0e:	613b      	str	r3, [r7, #16]
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	693b      	ldr	r3, [r7, #16]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	007a1200 	.word	0x007a1200
 8001b28:	08002564 	.word	0x08002564
 8001b2c:	08002574 	.word	0x08002574
 8001b30:	003d0900 	.word	0x003d0900

08001b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b38:	4b02      	ldr	r3, [pc, #8]	@ (8001b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	2000003c 	.word	0x2000003c

08001b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <RCC_Delay+0x34>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <RCC_Delay+0x38>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b64:	bf00      	nop
  }
  while (Delay --);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	60fa      	str	r2, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <RCC_Delay+0x1c>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	2000003c 	.word	0x2000003c
 8001b80:	10624dd3 	.word	0x10624dd3

08001b84 <siprintf>:
 8001b84:	b40e      	push	{r1, r2, r3}
 8001b86:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001b8a:	b500      	push	{lr}
 8001b8c:	b09c      	sub	sp, #112	@ 0x70
 8001b8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001b90:	9002      	str	r0, [sp, #8]
 8001b92:	9006      	str	r0, [sp, #24]
 8001b94:	9107      	str	r1, [sp, #28]
 8001b96:	9104      	str	r1, [sp, #16]
 8001b98:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <siprintf+0x38>)
 8001b9a:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <siprintf+0x3c>)
 8001b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ba0:	9105      	str	r1, [sp, #20]
 8001ba2:	6800      	ldr	r0, [r0, #0]
 8001ba4:	a902      	add	r1, sp, #8
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	f000 f992 	bl	8001ed0 <_svfiprintf_r>
 8001bac:	2200      	movs	r2, #0
 8001bae:	9b02      	ldr	r3, [sp, #8]
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	b01c      	add	sp, #112	@ 0x70
 8001bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bb8:	b003      	add	sp, #12
 8001bba:	4770      	bx	lr
 8001bbc:	20000048 	.word	0x20000048
 8001bc0:	ffff0208 	.word	0xffff0208

08001bc4 <memset>:
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4402      	add	r2, r0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d100      	bne.n	8001bce <memset+0xa>
 8001bcc:	4770      	bx	lr
 8001bce:	f803 1b01 	strb.w	r1, [r3], #1
 8001bd2:	e7f9      	b.n	8001bc8 <memset+0x4>

08001bd4 <__errno>:
 8001bd4:	4b01      	ldr	r3, [pc, #4]	@ (8001bdc <__errno+0x8>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000048 	.word	0x20000048

08001be0 <__libc_init_array>:
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	2600      	movs	r6, #0
 8001be4:	4d0c      	ldr	r5, [pc, #48]	@ (8001c18 <__libc_init_array+0x38>)
 8001be6:	4c0d      	ldr	r4, [pc, #52]	@ (8001c1c <__libc_init_array+0x3c>)
 8001be8:	1b64      	subs	r4, r4, r5
 8001bea:	10a4      	asrs	r4, r4, #2
 8001bec:	42a6      	cmp	r6, r4
 8001bee:	d109      	bne.n	8001c04 <__libc_init_array+0x24>
 8001bf0:	f000 fc78 	bl	80024e4 <_init>
 8001bf4:	2600      	movs	r6, #0
 8001bf6:	4d0a      	ldr	r5, [pc, #40]	@ (8001c20 <__libc_init_array+0x40>)
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c24 <__libc_init_array+0x44>)
 8001bfa:	1b64      	subs	r4, r4, r5
 8001bfc:	10a4      	asrs	r4, r4, #2
 8001bfe:	42a6      	cmp	r6, r4
 8001c00:	d105      	bne.n	8001c0e <__libc_init_array+0x2e>
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c08:	4798      	blx	r3
 8001c0a:	3601      	adds	r6, #1
 8001c0c:	e7ee      	b.n	8001bec <__libc_init_array+0xc>
 8001c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c12:	4798      	blx	r3
 8001c14:	3601      	adds	r6, #1
 8001c16:	e7f2      	b.n	8001bfe <__libc_init_array+0x1e>
 8001c18:	080025ac 	.word	0x080025ac
 8001c1c:	080025ac 	.word	0x080025ac
 8001c20:	080025ac 	.word	0x080025ac
 8001c24:	080025b0 	.word	0x080025b0

08001c28 <__retarget_lock_acquire_recursive>:
 8001c28:	4770      	bx	lr

08001c2a <__retarget_lock_release_recursive>:
 8001c2a:	4770      	bx	lr

08001c2c <_free_r>:
 8001c2c:	b538      	push	{r3, r4, r5, lr}
 8001c2e:	4605      	mov	r5, r0
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d040      	beq.n	8001cb6 <_free_r+0x8a>
 8001c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c38:	1f0c      	subs	r4, r1, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bfb8      	it	lt
 8001c3e:	18e4      	addlt	r4, r4, r3
 8001c40:	f000 f8de 	bl	8001e00 <__malloc_lock>
 8001c44:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <_free_r+0x8c>)
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	b933      	cbnz	r3, 8001c58 <_free_r+0x2c>
 8001c4a:	6063      	str	r3, [r4, #4]
 8001c4c:	6014      	str	r4, [r2, #0]
 8001c4e:	4628      	mov	r0, r5
 8001c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c54:	f000 b8da 	b.w	8001e0c <__malloc_unlock>
 8001c58:	42a3      	cmp	r3, r4
 8001c5a:	d908      	bls.n	8001c6e <_free_r+0x42>
 8001c5c:	6820      	ldr	r0, [r4, #0]
 8001c5e:	1821      	adds	r1, r4, r0
 8001c60:	428b      	cmp	r3, r1
 8001c62:	bf01      	itttt	eq
 8001c64:	6819      	ldreq	r1, [r3, #0]
 8001c66:	685b      	ldreq	r3, [r3, #4]
 8001c68:	1809      	addeq	r1, r1, r0
 8001c6a:	6021      	streq	r1, [r4, #0]
 8001c6c:	e7ed      	b.n	8001c4a <_free_r+0x1e>
 8001c6e:	461a      	mov	r2, r3
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	b10b      	cbz	r3, 8001c78 <_free_r+0x4c>
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	d9fa      	bls.n	8001c6e <_free_r+0x42>
 8001c78:	6811      	ldr	r1, [r2, #0]
 8001c7a:	1850      	adds	r0, r2, r1
 8001c7c:	42a0      	cmp	r0, r4
 8001c7e:	d10b      	bne.n	8001c98 <_free_r+0x6c>
 8001c80:	6820      	ldr	r0, [r4, #0]
 8001c82:	4401      	add	r1, r0
 8001c84:	1850      	adds	r0, r2, r1
 8001c86:	4283      	cmp	r3, r0
 8001c88:	6011      	str	r1, [r2, #0]
 8001c8a:	d1e0      	bne.n	8001c4e <_free_r+0x22>
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4408      	add	r0, r1
 8001c92:	6010      	str	r0, [r2, #0]
 8001c94:	6053      	str	r3, [r2, #4]
 8001c96:	e7da      	b.n	8001c4e <_free_r+0x22>
 8001c98:	d902      	bls.n	8001ca0 <_free_r+0x74>
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	e7d6      	b.n	8001c4e <_free_r+0x22>
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	1821      	adds	r1, r4, r0
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	bf01      	itttt	eq
 8001ca8:	6819      	ldreq	r1, [r3, #0]
 8001caa:	685b      	ldreq	r3, [r3, #4]
 8001cac:	1809      	addeq	r1, r1, r0
 8001cae:	6021      	streq	r1, [r4, #0]
 8001cb0:	6063      	str	r3, [r4, #4]
 8001cb2:	6054      	str	r4, [r2, #4]
 8001cb4:	e7cb      	b.n	8001c4e <_free_r+0x22>
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	20000200 	.word	0x20000200

08001cbc <sbrk_aligned>:
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8001cfc <sbrk_aligned+0x40>)
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	6831      	ldr	r1, [r6, #0]
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	b911      	cbnz	r1, 8001cce <sbrk_aligned+0x12>
 8001cc8:	f000 fbaa 	bl	8002420 <_sbrk_r>
 8001ccc:	6030      	str	r0, [r6, #0]
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f000 fba5 	bl	8002420 <_sbrk_r>
 8001cd6:	1c43      	adds	r3, r0, #1
 8001cd8:	d103      	bne.n	8001ce2 <sbrk_aligned+0x26>
 8001cda:	f04f 34ff 	mov.w	r4, #4294967295
 8001cde:	4620      	mov	r0, r4
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
 8001ce2:	1cc4      	adds	r4, r0, #3
 8001ce4:	f024 0403 	bic.w	r4, r4, #3
 8001ce8:	42a0      	cmp	r0, r4
 8001cea:	d0f8      	beq.n	8001cde <sbrk_aligned+0x22>
 8001cec:	1a21      	subs	r1, r4, r0
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f000 fb96 	bl	8002420 <_sbrk_r>
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	d1f2      	bne.n	8001cde <sbrk_aligned+0x22>
 8001cf8:	e7ef      	b.n	8001cda <sbrk_aligned+0x1e>
 8001cfa:	bf00      	nop
 8001cfc:	200001fc 	.word	0x200001fc

08001d00 <_malloc_r>:
 8001d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d04:	1ccd      	adds	r5, r1, #3
 8001d06:	f025 0503 	bic.w	r5, r5, #3
 8001d0a:	3508      	adds	r5, #8
 8001d0c:	2d0c      	cmp	r5, #12
 8001d0e:	bf38      	it	cc
 8001d10:	250c      	movcc	r5, #12
 8001d12:	2d00      	cmp	r5, #0
 8001d14:	4606      	mov	r6, r0
 8001d16:	db01      	blt.n	8001d1c <_malloc_r+0x1c>
 8001d18:	42a9      	cmp	r1, r5
 8001d1a:	d904      	bls.n	8001d26 <_malloc_r+0x26>
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	6033      	str	r3, [r6, #0]
 8001d20:	2000      	movs	r0, #0
 8001d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001dfc <_malloc_r+0xfc>
 8001d2a:	f000 f869 	bl	8001e00 <__malloc_lock>
 8001d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d32:	461c      	mov	r4, r3
 8001d34:	bb44      	cbnz	r4, 8001d88 <_malloc_r+0x88>
 8001d36:	4629      	mov	r1, r5
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f7ff ffbf 	bl	8001cbc <sbrk_aligned>
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	4604      	mov	r4, r0
 8001d42:	d158      	bne.n	8001df6 <_malloc_r+0xf6>
 8001d44:	f8d8 4000 	ldr.w	r4, [r8]
 8001d48:	4627      	mov	r7, r4
 8001d4a:	2f00      	cmp	r7, #0
 8001d4c:	d143      	bne.n	8001dd6 <_malloc_r+0xd6>
 8001d4e:	2c00      	cmp	r4, #0
 8001d50:	d04b      	beq.n	8001dea <_malloc_r+0xea>
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	4639      	mov	r1, r7
 8001d56:	4630      	mov	r0, r6
 8001d58:	eb04 0903 	add.w	r9, r4, r3
 8001d5c:	f000 fb60 	bl	8002420 <_sbrk_r>
 8001d60:	4581      	cmp	r9, r0
 8001d62:	d142      	bne.n	8001dea <_malloc_r+0xea>
 8001d64:	6821      	ldr	r1, [r4, #0]
 8001d66:	4630      	mov	r0, r6
 8001d68:	1a6d      	subs	r5, r5, r1
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7ff ffa6 	bl	8001cbc <sbrk_aligned>
 8001d70:	3001      	adds	r0, #1
 8001d72:	d03a      	beq.n	8001dea <_malloc_r+0xea>
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	442b      	add	r3, r5
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	bb62      	cbnz	r2, 8001ddc <_malloc_r+0xdc>
 8001d82:	f8c8 7000 	str.w	r7, [r8]
 8001d86:	e00f      	b.n	8001da8 <_malloc_r+0xa8>
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	1b52      	subs	r2, r2, r5
 8001d8c:	d420      	bmi.n	8001dd0 <_malloc_r+0xd0>
 8001d8e:	2a0b      	cmp	r2, #11
 8001d90:	d917      	bls.n	8001dc2 <_malloc_r+0xc2>
 8001d92:	1961      	adds	r1, r4, r5
 8001d94:	42a3      	cmp	r3, r4
 8001d96:	6025      	str	r5, [r4, #0]
 8001d98:	bf18      	it	ne
 8001d9a:	6059      	strne	r1, [r3, #4]
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	bf08      	it	eq
 8001da0:	f8c8 1000 	streq.w	r1, [r8]
 8001da4:	5162      	str	r2, [r4, r5]
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	4630      	mov	r0, r6
 8001daa:	f000 f82f 	bl	8001e0c <__malloc_unlock>
 8001dae:	f104 000b 	add.w	r0, r4, #11
 8001db2:	1d23      	adds	r3, r4, #4
 8001db4:	f020 0007 	bic.w	r0, r0, #7
 8001db8:	1ac2      	subs	r2, r0, r3
 8001dba:	bf1c      	itt	ne
 8001dbc:	1a1b      	subne	r3, r3, r0
 8001dbe:	50a3      	strne	r3, [r4, r2]
 8001dc0:	e7af      	b.n	8001d22 <_malloc_r+0x22>
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	42a3      	cmp	r3, r4
 8001dc6:	bf0c      	ite	eq
 8001dc8:	f8c8 2000 	streq.w	r2, [r8]
 8001dcc:	605a      	strne	r2, [r3, #4]
 8001dce:	e7eb      	b.n	8001da8 <_malloc_r+0xa8>
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	6864      	ldr	r4, [r4, #4]
 8001dd4:	e7ae      	b.n	8001d34 <_malloc_r+0x34>
 8001dd6:	463c      	mov	r4, r7
 8001dd8:	687f      	ldr	r7, [r7, #4]
 8001dda:	e7b6      	b.n	8001d4a <_malloc_r+0x4a>
 8001ddc:	461a      	mov	r2, r3
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	42a3      	cmp	r3, r4
 8001de2:	d1fb      	bne.n	8001ddc <_malloc_r+0xdc>
 8001de4:	2300      	movs	r3, #0
 8001de6:	6053      	str	r3, [r2, #4]
 8001de8:	e7de      	b.n	8001da8 <_malloc_r+0xa8>
 8001dea:	230c      	movs	r3, #12
 8001dec:	4630      	mov	r0, r6
 8001dee:	6033      	str	r3, [r6, #0]
 8001df0:	f000 f80c 	bl	8001e0c <__malloc_unlock>
 8001df4:	e794      	b.n	8001d20 <_malloc_r+0x20>
 8001df6:	6005      	str	r5, [r0, #0]
 8001df8:	e7d6      	b.n	8001da8 <_malloc_r+0xa8>
 8001dfa:	bf00      	nop
 8001dfc:	20000200 	.word	0x20000200

08001e00 <__malloc_lock>:
 8001e00:	4801      	ldr	r0, [pc, #4]	@ (8001e08 <__malloc_lock+0x8>)
 8001e02:	f7ff bf11 	b.w	8001c28 <__retarget_lock_acquire_recursive>
 8001e06:	bf00      	nop
 8001e08:	200001f8 	.word	0x200001f8

08001e0c <__malloc_unlock>:
 8001e0c:	4801      	ldr	r0, [pc, #4]	@ (8001e14 <__malloc_unlock+0x8>)
 8001e0e:	f7ff bf0c 	b.w	8001c2a <__retarget_lock_release_recursive>
 8001e12:	bf00      	nop
 8001e14:	200001f8 	.word	0x200001f8

08001e18 <__ssputs_r>:
 8001e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e1c:	461f      	mov	r7, r3
 8001e1e:	688e      	ldr	r6, [r1, #8]
 8001e20:	4682      	mov	sl, r0
 8001e22:	42be      	cmp	r6, r7
 8001e24:	460c      	mov	r4, r1
 8001e26:	4690      	mov	r8, r2
 8001e28:	680b      	ldr	r3, [r1, #0]
 8001e2a:	d82d      	bhi.n	8001e88 <__ssputs_r+0x70>
 8001e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001e34:	d026      	beq.n	8001e84 <__ssputs_r+0x6c>
 8001e36:	6965      	ldr	r5, [r4, #20]
 8001e38:	6909      	ldr	r1, [r1, #16]
 8001e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e3e:	eba3 0901 	sub.w	r9, r3, r1
 8001e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e46:	1c7b      	adds	r3, r7, #1
 8001e48:	444b      	add	r3, r9
 8001e4a:	106d      	asrs	r5, r5, #1
 8001e4c:	429d      	cmp	r5, r3
 8001e4e:	bf38      	it	cc
 8001e50:	461d      	movcc	r5, r3
 8001e52:	0553      	lsls	r3, r2, #21
 8001e54:	d527      	bpl.n	8001ea6 <__ssputs_r+0x8e>
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7ff ff52 	bl	8001d00 <_malloc_r>
 8001e5c:	4606      	mov	r6, r0
 8001e5e:	b360      	cbz	r0, 8001eba <__ssputs_r+0xa2>
 8001e60:	464a      	mov	r2, r9
 8001e62:	6921      	ldr	r1, [r4, #16]
 8001e64:	f000 fafa 	bl	800245c <memcpy>
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e72:	81a3      	strh	r3, [r4, #12]
 8001e74:	6126      	str	r6, [r4, #16]
 8001e76:	444e      	add	r6, r9
 8001e78:	6026      	str	r6, [r4, #0]
 8001e7a:	463e      	mov	r6, r7
 8001e7c:	6165      	str	r5, [r4, #20]
 8001e7e:	eba5 0509 	sub.w	r5, r5, r9
 8001e82:	60a5      	str	r5, [r4, #8]
 8001e84:	42be      	cmp	r6, r7
 8001e86:	d900      	bls.n	8001e8a <__ssputs_r+0x72>
 8001e88:	463e      	mov	r6, r7
 8001e8a:	4632      	mov	r2, r6
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	6820      	ldr	r0, [r4, #0]
 8001e90:	f000 faac 	bl	80023ec <memmove>
 8001e94:	2000      	movs	r0, #0
 8001e96:	68a3      	ldr	r3, [r4, #8]
 8001e98:	1b9b      	subs	r3, r3, r6
 8001e9a:	60a3      	str	r3, [r4, #8]
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	4433      	add	r3, r6
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea6:	462a      	mov	r2, r5
 8001ea8:	f000 fae6 	bl	8002478 <_realloc_r>
 8001eac:	4606      	mov	r6, r0
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1e0      	bne.n	8001e74 <__ssputs_r+0x5c>
 8001eb2:	4650      	mov	r0, sl
 8001eb4:	6921      	ldr	r1, [r4, #16]
 8001eb6:	f7ff feb9 	bl	8001c2c <_free_r>
 8001eba:	230c      	movs	r3, #12
 8001ebc:	f8ca 3000 	str.w	r3, [sl]
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eca:	81a3      	strh	r3, [r4, #12]
 8001ecc:	e7e9      	b.n	8001ea2 <__ssputs_r+0x8a>
	...

08001ed0 <_svfiprintf_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	898b      	ldrh	r3, [r1, #12]
 8001ed8:	4607      	mov	r7, r0
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	460d      	mov	r5, r1
 8001ede:	4614      	mov	r4, r2
 8001ee0:	b09d      	sub	sp, #116	@ 0x74
 8001ee2:	d510      	bpl.n	8001f06 <_svfiprintf_r+0x36>
 8001ee4:	690b      	ldr	r3, [r1, #16]
 8001ee6:	b973      	cbnz	r3, 8001f06 <_svfiprintf_r+0x36>
 8001ee8:	2140      	movs	r1, #64	@ 0x40
 8001eea:	f7ff ff09 	bl	8001d00 <_malloc_r>
 8001eee:	6028      	str	r0, [r5, #0]
 8001ef0:	6128      	str	r0, [r5, #16]
 8001ef2:	b930      	cbnz	r0, 8001f02 <_svfiprintf_r+0x32>
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	b01d      	add	sp, #116	@ 0x74
 8001efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f02:	2340      	movs	r3, #64	@ 0x40
 8001f04:	616b      	str	r3, [r5, #20]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f10:	2330      	movs	r3, #48	@ 0x30
 8001f12:	f04f 0901 	mov.w	r9, #1
 8001f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80020b4 <_svfiprintf_r+0x1e4>
 8001f1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f22:	4623      	mov	r3, r4
 8001f24:	469a      	mov	sl, r3
 8001f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f2a:	b10a      	cbz	r2, 8001f30 <_svfiprintf_r+0x60>
 8001f2c:	2a25      	cmp	r2, #37	@ 0x25
 8001f2e:	d1f9      	bne.n	8001f24 <_svfiprintf_r+0x54>
 8001f30:	ebba 0b04 	subs.w	fp, sl, r4
 8001f34:	d00b      	beq.n	8001f4e <_svfiprintf_r+0x7e>
 8001f36:	465b      	mov	r3, fp
 8001f38:	4622      	mov	r2, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	f7ff ff6b 	bl	8001e18 <__ssputs_r>
 8001f42:	3001      	adds	r0, #1
 8001f44:	f000 80a7 	beq.w	8002096 <_svfiprintf_r+0x1c6>
 8001f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f4a:	445a      	add	r2, fp
 8001f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 809f 	beq.w	8002096 <_svfiprintf_r+0x1c6>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f62:	f10a 0a01 	add.w	sl, sl, #1
 8001f66:	9304      	str	r3, [sp, #16]
 8001f68:	9307      	str	r3, [sp, #28]
 8001f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f70:	4654      	mov	r4, sl
 8001f72:	2205      	movs	r2, #5
 8001f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f78:	484e      	ldr	r0, [pc, #312]	@ (80020b4 <_svfiprintf_r+0x1e4>)
 8001f7a:	f000 fa61 	bl	8002440 <memchr>
 8001f7e:	9a04      	ldr	r2, [sp, #16]
 8001f80:	b9d8      	cbnz	r0, 8001fba <_svfiprintf_r+0xea>
 8001f82:	06d0      	lsls	r0, r2, #27
 8001f84:	bf44      	itt	mi
 8001f86:	2320      	movmi	r3, #32
 8001f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f8c:	0711      	lsls	r1, r2, #28
 8001f8e:	bf44      	itt	mi
 8001f90:	232b      	movmi	r3, #43	@ 0x2b
 8001f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f96:	f89a 3000 	ldrb.w	r3, [sl]
 8001f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f9c:	d015      	beq.n	8001fca <_svfiprintf_r+0xfa>
 8001f9e:	4654      	mov	r4, sl
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f04f 0c0a 	mov.w	ip, #10
 8001fa6:	9a07      	ldr	r2, [sp, #28]
 8001fa8:	4621      	mov	r1, r4
 8001faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fae:	3b30      	subs	r3, #48	@ 0x30
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d94b      	bls.n	800204c <_svfiprintf_r+0x17c>
 8001fb4:	b1b0      	cbz	r0, 8001fe4 <_svfiprintf_r+0x114>
 8001fb6:	9207      	str	r2, [sp, #28]
 8001fb8:	e014      	b.n	8001fe4 <_svfiprintf_r+0x114>
 8001fba:	eba0 0308 	sub.w	r3, r0, r8
 8001fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	46a2      	mov	sl, r4
 8001fc6:	9304      	str	r3, [sp, #16]
 8001fc8:	e7d2      	b.n	8001f70 <_svfiprintf_r+0xa0>
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	1d19      	adds	r1, r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	9103      	str	r1, [sp, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bfbb      	ittet	lt
 8001fd6:	425b      	neglt	r3, r3
 8001fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8001fdc:	9307      	strge	r3, [sp, #28]
 8001fde:	9307      	strlt	r3, [sp, #28]
 8001fe0:	bfb8      	it	lt
 8001fe2:	9204      	strlt	r2, [sp, #16]
 8001fe4:	7823      	ldrb	r3, [r4, #0]
 8001fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fe8:	d10a      	bne.n	8002000 <_svfiprintf_r+0x130>
 8001fea:	7863      	ldrb	r3, [r4, #1]
 8001fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fee:	d132      	bne.n	8002056 <_svfiprintf_r+0x186>
 8001ff0:	9b03      	ldr	r3, [sp, #12]
 8001ff2:	3402      	adds	r4, #2
 8001ff4:	1d1a      	adds	r2, r3, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	9203      	str	r2, [sp, #12]
 8001ffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ffe:	9305      	str	r3, [sp, #20]
 8002000:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80020b8 <_svfiprintf_r+0x1e8>
 8002004:	2203      	movs	r2, #3
 8002006:	4650      	mov	r0, sl
 8002008:	7821      	ldrb	r1, [r4, #0]
 800200a:	f000 fa19 	bl	8002440 <memchr>
 800200e:	b138      	cbz	r0, 8002020 <_svfiprintf_r+0x150>
 8002010:	2240      	movs	r2, #64	@ 0x40
 8002012:	9b04      	ldr	r3, [sp, #16]
 8002014:	eba0 000a 	sub.w	r0, r0, sl
 8002018:	4082      	lsls	r2, r0
 800201a:	4313      	orrs	r3, r2
 800201c:	3401      	adds	r4, #1
 800201e:	9304      	str	r3, [sp, #16]
 8002020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002024:	2206      	movs	r2, #6
 8002026:	4825      	ldr	r0, [pc, #148]	@ (80020bc <_svfiprintf_r+0x1ec>)
 8002028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800202c:	f000 fa08 	bl	8002440 <memchr>
 8002030:	2800      	cmp	r0, #0
 8002032:	d036      	beq.n	80020a2 <_svfiprintf_r+0x1d2>
 8002034:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <_svfiprintf_r+0x1f0>)
 8002036:	bb1b      	cbnz	r3, 8002080 <_svfiprintf_r+0x1b0>
 8002038:	9b03      	ldr	r3, [sp, #12]
 800203a:	3307      	adds	r3, #7
 800203c:	f023 0307 	bic.w	r3, r3, #7
 8002040:	3308      	adds	r3, #8
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002046:	4433      	add	r3, r6
 8002048:	9309      	str	r3, [sp, #36]	@ 0x24
 800204a:	e76a      	b.n	8001f22 <_svfiprintf_r+0x52>
 800204c:	460c      	mov	r4, r1
 800204e:	2001      	movs	r0, #1
 8002050:	fb0c 3202 	mla	r2, ip, r2, r3
 8002054:	e7a8      	b.n	8001fa8 <_svfiprintf_r+0xd8>
 8002056:	2300      	movs	r3, #0
 8002058:	f04f 0c0a 	mov.w	ip, #10
 800205c:	4619      	mov	r1, r3
 800205e:	3401      	adds	r4, #1
 8002060:	9305      	str	r3, [sp, #20]
 8002062:	4620      	mov	r0, r4
 8002064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002068:	3a30      	subs	r2, #48	@ 0x30
 800206a:	2a09      	cmp	r2, #9
 800206c:	d903      	bls.n	8002076 <_svfiprintf_r+0x1a6>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0c6      	beq.n	8002000 <_svfiprintf_r+0x130>
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	e7c4      	b.n	8002000 <_svfiprintf_r+0x130>
 8002076:	4604      	mov	r4, r0
 8002078:	2301      	movs	r3, #1
 800207a:	fb0c 2101 	mla	r1, ip, r1, r2
 800207e:	e7f0      	b.n	8002062 <_svfiprintf_r+0x192>
 8002080:	ab03      	add	r3, sp, #12
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	462a      	mov	r2, r5
 8002086:	4638      	mov	r0, r7
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <_svfiprintf_r+0x1f4>)
 800208a:	a904      	add	r1, sp, #16
 800208c:	f3af 8000 	nop.w
 8002090:	1c42      	adds	r2, r0, #1
 8002092:	4606      	mov	r6, r0
 8002094:	d1d6      	bne.n	8002044 <_svfiprintf_r+0x174>
 8002096:	89ab      	ldrh	r3, [r5, #12]
 8002098:	065b      	lsls	r3, r3, #25
 800209a:	f53f af2d 	bmi.w	8001ef8 <_svfiprintf_r+0x28>
 800209e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020a0:	e72c      	b.n	8001efc <_svfiprintf_r+0x2c>
 80020a2:	ab03      	add	r3, sp, #12
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	462a      	mov	r2, r5
 80020a8:	4638      	mov	r0, r7
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <_svfiprintf_r+0x1f4>)
 80020ac:	a904      	add	r1, sp, #16
 80020ae:	f000 f87d 	bl	80021ac <_printf_i>
 80020b2:	e7ed      	b.n	8002090 <_svfiprintf_r+0x1c0>
 80020b4:	08002576 	.word	0x08002576
 80020b8:	0800257c 	.word	0x0800257c
 80020bc:	08002580 	.word	0x08002580
 80020c0:	00000000 	.word	0x00000000
 80020c4:	08001e19 	.word	0x08001e19

080020c8 <_printf_common>:
 80020c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020cc:	4616      	mov	r6, r2
 80020ce:	4698      	mov	r8, r3
 80020d0:	688a      	ldr	r2, [r1, #8]
 80020d2:	690b      	ldr	r3, [r1, #16]
 80020d4:	4607      	mov	r7, r0
 80020d6:	4293      	cmp	r3, r2
 80020d8:	bfb8      	it	lt
 80020da:	4613      	movlt	r3, r2
 80020dc:	6033      	str	r3, [r6, #0]
 80020de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80020e2:	460c      	mov	r4, r1
 80020e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020e8:	b10a      	cbz	r2, 80020ee <_printf_common+0x26>
 80020ea:	3301      	adds	r3, #1
 80020ec:	6033      	str	r3, [r6, #0]
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	0699      	lsls	r1, r3, #26
 80020f2:	bf42      	ittt	mi
 80020f4:	6833      	ldrmi	r3, [r6, #0]
 80020f6:	3302      	addmi	r3, #2
 80020f8:	6033      	strmi	r3, [r6, #0]
 80020fa:	6825      	ldr	r5, [r4, #0]
 80020fc:	f015 0506 	ands.w	r5, r5, #6
 8002100:	d106      	bne.n	8002110 <_printf_common+0x48>
 8002102:	f104 0a19 	add.w	sl, r4, #25
 8002106:	68e3      	ldr	r3, [r4, #12]
 8002108:	6832      	ldr	r2, [r6, #0]
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	42ab      	cmp	r3, r5
 800210e:	dc2b      	bgt.n	8002168 <_printf_common+0xa0>
 8002110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	3b00      	subs	r3, #0
 8002118:	bf18      	it	ne
 800211a:	2301      	movne	r3, #1
 800211c:	0692      	lsls	r2, r2, #26
 800211e:	d430      	bmi.n	8002182 <_printf_common+0xba>
 8002120:	4641      	mov	r1, r8
 8002122:	4638      	mov	r0, r7
 8002124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002128:	47c8      	blx	r9
 800212a:	3001      	adds	r0, #1
 800212c:	d023      	beq.n	8002176 <_printf_common+0xae>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	6922      	ldr	r2, [r4, #16]
 8002132:	f003 0306 	and.w	r3, r3, #6
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf14      	ite	ne
 800213a:	2500      	movne	r5, #0
 800213c:	6833      	ldreq	r3, [r6, #0]
 800213e:	f04f 0600 	mov.w	r6, #0
 8002142:	bf08      	it	eq
 8002144:	68e5      	ldreq	r5, [r4, #12]
 8002146:	f104 041a 	add.w	r4, r4, #26
 800214a:	bf08      	it	eq
 800214c:	1aed      	subeq	r5, r5, r3
 800214e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002152:	bf08      	it	eq
 8002154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002158:	4293      	cmp	r3, r2
 800215a:	bfc4      	itt	gt
 800215c:	1a9b      	subgt	r3, r3, r2
 800215e:	18ed      	addgt	r5, r5, r3
 8002160:	42b5      	cmp	r5, r6
 8002162:	d11a      	bne.n	800219a <_printf_common+0xd2>
 8002164:	2000      	movs	r0, #0
 8002166:	e008      	b.n	800217a <_printf_common+0xb2>
 8002168:	2301      	movs	r3, #1
 800216a:	4652      	mov	r2, sl
 800216c:	4641      	mov	r1, r8
 800216e:	4638      	mov	r0, r7
 8002170:	47c8      	blx	r9
 8002172:	3001      	adds	r0, #1
 8002174:	d103      	bne.n	800217e <_printf_common+0xb6>
 8002176:	f04f 30ff 	mov.w	r0, #4294967295
 800217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217e:	3501      	adds	r5, #1
 8002180:	e7c1      	b.n	8002106 <_printf_common+0x3e>
 8002182:	2030      	movs	r0, #48	@ 0x30
 8002184:	18e1      	adds	r1, r4, r3
 8002186:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002190:	4422      	add	r2, r4
 8002192:	3302      	adds	r3, #2
 8002194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002198:	e7c2      	b.n	8002120 <_printf_common+0x58>
 800219a:	2301      	movs	r3, #1
 800219c:	4622      	mov	r2, r4
 800219e:	4641      	mov	r1, r8
 80021a0:	4638      	mov	r0, r7
 80021a2:	47c8      	blx	r9
 80021a4:	3001      	adds	r0, #1
 80021a6:	d0e6      	beq.n	8002176 <_printf_common+0xae>
 80021a8:	3601      	adds	r6, #1
 80021aa:	e7d9      	b.n	8002160 <_printf_common+0x98>

080021ac <_printf_i>:
 80021ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021b0:	7e0f      	ldrb	r7, [r1, #24]
 80021b2:	4691      	mov	r9, r2
 80021b4:	2f78      	cmp	r7, #120	@ 0x78
 80021b6:	4680      	mov	r8, r0
 80021b8:	460c      	mov	r4, r1
 80021ba:	469a      	mov	sl, r3
 80021bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021c2:	d807      	bhi.n	80021d4 <_printf_i+0x28>
 80021c4:	2f62      	cmp	r7, #98	@ 0x62
 80021c6:	d80a      	bhi.n	80021de <_printf_i+0x32>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	f000 80d3 	beq.w	8002374 <_printf_i+0x1c8>
 80021ce:	2f58      	cmp	r7, #88	@ 0x58
 80021d0:	f000 80ba 	beq.w	8002348 <_printf_i+0x19c>
 80021d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021dc:	e03a      	b.n	8002254 <_printf_i+0xa8>
 80021de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021e2:	2b15      	cmp	r3, #21
 80021e4:	d8f6      	bhi.n	80021d4 <_printf_i+0x28>
 80021e6:	a101      	add	r1, pc, #4	@ (adr r1, 80021ec <_printf_i+0x40>)
 80021e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021ec:	08002245 	.word	0x08002245
 80021f0:	08002259 	.word	0x08002259
 80021f4:	080021d5 	.word	0x080021d5
 80021f8:	080021d5 	.word	0x080021d5
 80021fc:	080021d5 	.word	0x080021d5
 8002200:	080021d5 	.word	0x080021d5
 8002204:	08002259 	.word	0x08002259
 8002208:	080021d5 	.word	0x080021d5
 800220c:	080021d5 	.word	0x080021d5
 8002210:	080021d5 	.word	0x080021d5
 8002214:	080021d5 	.word	0x080021d5
 8002218:	0800235b 	.word	0x0800235b
 800221c:	08002283 	.word	0x08002283
 8002220:	08002315 	.word	0x08002315
 8002224:	080021d5 	.word	0x080021d5
 8002228:	080021d5 	.word	0x080021d5
 800222c:	0800237d 	.word	0x0800237d
 8002230:	080021d5 	.word	0x080021d5
 8002234:	08002283 	.word	0x08002283
 8002238:	080021d5 	.word	0x080021d5
 800223c:	080021d5 	.word	0x080021d5
 8002240:	0800231d 	.word	0x0800231d
 8002244:	6833      	ldr	r3, [r6, #0]
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6032      	str	r2, [r6, #0]
 800224c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002254:	2301      	movs	r3, #1
 8002256:	e09e      	b.n	8002396 <_printf_i+0x1ea>
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	6820      	ldr	r0, [r4, #0]
 800225c:	1d19      	adds	r1, r3, #4
 800225e:	6031      	str	r1, [r6, #0]
 8002260:	0606      	lsls	r6, r0, #24
 8002262:	d501      	bpl.n	8002268 <_printf_i+0xbc>
 8002264:	681d      	ldr	r5, [r3, #0]
 8002266:	e003      	b.n	8002270 <_printf_i+0xc4>
 8002268:	0645      	lsls	r5, r0, #25
 800226a:	d5fb      	bpl.n	8002264 <_printf_i+0xb8>
 800226c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002270:	2d00      	cmp	r5, #0
 8002272:	da03      	bge.n	800227c <_printf_i+0xd0>
 8002274:	232d      	movs	r3, #45	@ 0x2d
 8002276:	426d      	negs	r5, r5
 8002278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800227c:	230a      	movs	r3, #10
 800227e:	4859      	ldr	r0, [pc, #356]	@ (80023e4 <_printf_i+0x238>)
 8002280:	e011      	b.n	80022a6 <_printf_i+0xfa>
 8002282:	6821      	ldr	r1, [r4, #0]
 8002284:	6833      	ldr	r3, [r6, #0]
 8002286:	0608      	lsls	r0, r1, #24
 8002288:	f853 5b04 	ldr.w	r5, [r3], #4
 800228c:	d402      	bmi.n	8002294 <_printf_i+0xe8>
 800228e:	0649      	lsls	r1, r1, #25
 8002290:	bf48      	it	mi
 8002292:	b2ad      	uxthmi	r5, r5
 8002294:	2f6f      	cmp	r7, #111	@ 0x6f
 8002296:	6033      	str	r3, [r6, #0]
 8002298:	bf14      	ite	ne
 800229a:	230a      	movne	r3, #10
 800229c:	2308      	moveq	r3, #8
 800229e:	4851      	ldr	r0, [pc, #324]	@ (80023e4 <_printf_i+0x238>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022a6:	6866      	ldr	r6, [r4, #4]
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	bfa8      	it	ge
 80022ac:	6821      	ldrge	r1, [r4, #0]
 80022ae:	60a6      	str	r6, [r4, #8]
 80022b0:	bfa4      	itt	ge
 80022b2:	f021 0104 	bicge.w	r1, r1, #4
 80022b6:	6021      	strge	r1, [r4, #0]
 80022b8:	b90d      	cbnz	r5, 80022be <_printf_i+0x112>
 80022ba:	2e00      	cmp	r6, #0
 80022bc:	d04b      	beq.n	8002356 <_printf_i+0x1aa>
 80022be:	4616      	mov	r6, r2
 80022c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80022c4:	fb03 5711 	mls	r7, r3, r1, r5
 80022c8:	5dc7      	ldrb	r7, [r0, r7]
 80022ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022ce:	462f      	mov	r7, r5
 80022d0:	42bb      	cmp	r3, r7
 80022d2:	460d      	mov	r5, r1
 80022d4:	d9f4      	bls.n	80022c0 <_printf_i+0x114>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d10b      	bne.n	80022f2 <_printf_i+0x146>
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	07df      	lsls	r7, r3, #31
 80022de:	d508      	bpl.n	80022f2 <_printf_i+0x146>
 80022e0:	6923      	ldr	r3, [r4, #16]
 80022e2:	6861      	ldr	r1, [r4, #4]
 80022e4:	4299      	cmp	r1, r3
 80022e6:	bfde      	ittt	le
 80022e8:	2330      	movle	r3, #48	@ 0x30
 80022ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022f2:	1b92      	subs	r2, r2, r6
 80022f4:	6122      	str	r2, [r4, #16]
 80022f6:	464b      	mov	r3, r9
 80022f8:	4621      	mov	r1, r4
 80022fa:	4640      	mov	r0, r8
 80022fc:	f8cd a000 	str.w	sl, [sp]
 8002300:	aa03      	add	r2, sp, #12
 8002302:	f7ff fee1 	bl	80020c8 <_printf_common>
 8002306:	3001      	adds	r0, #1
 8002308:	d14a      	bne.n	80023a0 <_printf_i+0x1f4>
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	b004      	add	sp, #16
 8002310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	6023      	str	r3, [r4, #0]
 800231c:	2778      	movs	r7, #120	@ 0x78
 800231e:	4832      	ldr	r0, [pc, #200]	@ (80023e8 <_printf_i+0x23c>)
 8002320:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	6831      	ldr	r1, [r6, #0]
 8002328:	061f      	lsls	r7, r3, #24
 800232a:	f851 5b04 	ldr.w	r5, [r1], #4
 800232e:	d402      	bmi.n	8002336 <_printf_i+0x18a>
 8002330:	065f      	lsls	r7, r3, #25
 8002332:	bf48      	it	mi
 8002334:	b2ad      	uxthmi	r5, r5
 8002336:	6031      	str	r1, [r6, #0]
 8002338:	07d9      	lsls	r1, r3, #31
 800233a:	bf44      	itt	mi
 800233c:	f043 0320 	orrmi.w	r3, r3, #32
 8002340:	6023      	strmi	r3, [r4, #0]
 8002342:	b11d      	cbz	r5, 800234c <_printf_i+0x1a0>
 8002344:	2310      	movs	r3, #16
 8002346:	e7ab      	b.n	80022a0 <_printf_i+0xf4>
 8002348:	4826      	ldr	r0, [pc, #152]	@ (80023e4 <_printf_i+0x238>)
 800234a:	e7e9      	b.n	8002320 <_printf_i+0x174>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f023 0320 	bic.w	r3, r3, #32
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	e7f6      	b.n	8002344 <_printf_i+0x198>
 8002356:	4616      	mov	r6, r2
 8002358:	e7bd      	b.n	80022d6 <_printf_i+0x12a>
 800235a:	6833      	ldr	r3, [r6, #0]
 800235c:	6825      	ldr	r5, [r4, #0]
 800235e:	1d18      	adds	r0, r3, #4
 8002360:	6961      	ldr	r1, [r4, #20]
 8002362:	6030      	str	r0, [r6, #0]
 8002364:	062e      	lsls	r6, r5, #24
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	d501      	bpl.n	800236e <_printf_i+0x1c2>
 800236a:	6019      	str	r1, [r3, #0]
 800236c:	e002      	b.n	8002374 <_printf_i+0x1c8>
 800236e:	0668      	lsls	r0, r5, #25
 8002370:	d5fb      	bpl.n	800236a <_printf_i+0x1be>
 8002372:	8019      	strh	r1, [r3, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	4616      	mov	r6, r2
 8002378:	6123      	str	r3, [r4, #16]
 800237a:	e7bc      	b.n	80022f6 <_printf_i+0x14a>
 800237c:	6833      	ldr	r3, [r6, #0]
 800237e:	2100      	movs	r1, #0
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	6032      	str	r2, [r6, #0]
 8002384:	681e      	ldr	r6, [r3, #0]
 8002386:	6862      	ldr	r2, [r4, #4]
 8002388:	4630      	mov	r0, r6
 800238a:	f000 f859 	bl	8002440 <memchr>
 800238e:	b108      	cbz	r0, 8002394 <_printf_i+0x1e8>
 8002390:	1b80      	subs	r0, r0, r6
 8002392:	6060      	str	r0, [r4, #4]
 8002394:	6863      	ldr	r3, [r4, #4]
 8002396:	6123      	str	r3, [r4, #16]
 8002398:	2300      	movs	r3, #0
 800239a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800239e:	e7aa      	b.n	80022f6 <_printf_i+0x14a>
 80023a0:	4632      	mov	r2, r6
 80023a2:	4649      	mov	r1, r9
 80023a4:	4640      	mov	r0, r8
 80023a6:	6923      	ldr	r3, [r4, #16]
 80023a8:	47d0      	blx	sl
 80023aa:	3001      	adds	r0, #1
 80023ac:	d0ad      	beq.n	800230a <_printf_i+0x15e>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	079b      	lsls	r3, r3, #30
 80023b2:	d413      	bmi.n	80023dc <_printf_i+0x230>
 80023b4:	68e0      	ldr	r0, [r4, #12]
 80023b6:	9b03      	ldr	r3, [sp, #12]
 80023b8:	4298      	cmp	r0, r3
 80023ba:	bfb8      	it	lt
 80023bc:	4618      	movlt	r0, r3
 80023be:	e7a6      	b.n	800230e <_printf_i+0x162>
 80023c0:	2301      	movs	r3, #1
 80023c2:	4632      	mov	r2, r6
 80023c4:	4649      	mov	r1, r9
 80023c6:	4640      	mov	r0, r8
 80023c8:	47d0      	blx	sl
 80023ca:	3001      	adds	r0, #1
 80023cc:	d09d      	beq.n	800230a <_printf_i+0x15e>
 80023ce:	3501      	adds	r5, #1
 80023d0:	68e3      	ldr	r3, [r4, #12]
 80023d2:	9903      	ldr	r1, [sp, #12]
 80023d4:	1a5b      	subs	r3, r3, r1
 80023d6:	42ab      	cmp	r3, r5
 80023d8:	dcf2      	bgt.n	80023c0 <_printf_i+0x214>
 80023da:	e7eb      	b.n	80023b4 <_printf_i+0x208>
 80023dc:	2500      	movs	r5, #0
 80023de:	f104 0619 	add.w	r6, r4, #25
 80023e2:	e7f5      	b.n	80023d0 <_printf_i+0x224>
 80023e4:	08002587 	.word	0x08002587
 80023e8:	08002598 	.word	0x08002598

080023ec <memmove>:
 80023ec:	4288      	cmp	r0, r1
 80023ee:	b510      	push	{r4, lr}
 80023f0:	eb01 0402 	add.w	r4, r1, r2
 80023f4:	d902      	bls.n	80023fc <memmove+0x10>
 80023f6:	4284      	cmp	r4, r0
 80023f8:	4623      	mov	r3, r4
 80023fa:	d807      	bhi.n	800240c <memmove+0x20>
 80023fc:	1e43      	subs	r3, r0, #1
 80023fe:	42a1      	cmp	r1, r4
 8002400:	d008      	beq.n	8002414 <memmove+0x28>
 8002402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800240a:	e7f8      	b.n	80023fe <memmove+0x12>
 800240c:	4601      	mov	r1, r0
 800240e:	4402      	add	r2, r0
 8002410:	428a      	cmp	r2, r1
 8002412:	d100      	bne.n	8002416 <memmove+0x2a>
 8002414:	bd10      	pop	{r4, pc}
 8002416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800241a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800241e:	e7f7      	b.n	8002410 <memmove+0x24>

08002420 <_sbrk_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	2300      	movs	r3, #0
 8002424:	4d05      	ldr	r5, [pc, #20]	@ (800243c <_sbrk_r+0x1c>)
 8002426:	4604      	mov	r4, r0
 8002428:	4608      	mov	r0, r1
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	f7fe f8f8 	bl	8000620 <_sbrk>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <_sbrk_r+0x1a>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	b103      	cbz	r3, 800243a <_sbrk_r+0x1a>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	200001f4 	.word	0x200001f4

08002440 <memchr>:
 8002440:	4603      	mov	r3, r0
 8002442:	b510      	push	{r4, lr}
 8002444:	b2c9      	uxtb	r1, r1
 8002446:	4402      	add	r2, r0
 8002448:	4293      	cmp	r3, r2
 800244a:	4618      	mov	r0, r3
 800244c:	d101      	bne.n	8002452 <memchr+0x12>
 800244e:	2000      	movs	r0, #0
 8002450:	e003      	b.n	800245a <memchr+0x1a>
 8002452:	7804      	ldrb	r4, [r0, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	428c      	cmp	r4, r1
 8002458:	d1f6      	bne.n	8002448 <memchr+0x8>
 800245a:	bd10      	pop	{r4, pc}

0800245c <memcpy>:
 800245c:	440a      	add	r2, r1
 800245e:	4291      	cmp	r1, r2
 8002460:	f100 33ff 	add.w	r3, r0, #4294967295
 8002464:	d100      	bne.n	8002468 <memcpy+0xc>
 8002466:	4770      	bx	lr
 8002468:	b510      	push	{r4, lr}
 800246a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800246e:	4291      	cmp	r1, r2
 8002470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002474:	d1f9      	bne.n	800246a <memcpy+0xe>
 8002476:	bd10      	pop	{r4, pc}

08002478 <_realloc_r>:
 8002478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247c:	4680      	mov	r8, r0
 800247e:	4615      	mov	r5, r2
 8002480:	460c      	mov	r4, r1
 8002482:	b921      	cbnz	r1, 800248e <_realloc_r+0x16>
 8002484:	4611      	mov	r1, r2
 8002486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800248a:	f7ff bc39 	b.w	8001d00 <_malloc_r>
 800248e:	b92a      	cbnz	r2, 800249c <_realloc_r+0x24>
 8002490:	f7ff fbcc 	bl	8001c2c <_free_r>
 8002494:	2400      	movs	r4, #0
 8002496:	4620      	mov	r0, r4
 8002498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800249c:	f000 f81a 	bl	80024d4 <_malloc_usable_size_r>
 80024a0:	4285      	cmp	r5, r0
 80024a2:	4606      	mov	r6, r0
 80024a4:	d802      	bhi.n	80024ac <_realloc_r+0x34>
 80024a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80024aa:	d8f4      	bhi.n	8002496 <_realloc_r+0x1e>
 80024ac:	4629      	mov	r1, r5
 80024ae:	4640      	mov	r0, r8
 80024b0:	f7ff fc26 	bl	8001d00 <_malloc_r>
 80024b4:	4607      	mov	r7, r0
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0ec      	beq.n	8002494 <_realloc_r+0x1c>
 80024ba:	42b5      	cmp	r5, r6
 80024bc:	462a      	mov	r2, r5
 80024be:	4621      	mov	r1, r4
 80024c0:	bf28      	it	cs
 80024c2:	4632      	movcs	r2, r6
 80024c4:	f7ff ffca 	bl	800245c <memcpy>
 80024c8:	4621      	mov	r1, r4
 80024ca:	4640      	mov	r0, r8
 80024cc:	f7ff fbae 	bl	8001c2c <_free_r>
 80024d0:	463c      	mov	r4, r7
 80024d2:	e7e0      	b.n	8002496 <_realloc_r+0x1e>

080024d4 <_malloc_usable_size_r>:
 80024d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d8:	1f18      	subs	r0, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bfbc      	itt	lt
 80024de:	580b      	ldrlt	r3, [r1, r0]
 80024e0:	18c0      	addlt	r0, r0, r3
 80024e2:	4770      	bx	lr

080024e4 <_init>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr

080024f0 <_fini>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	bf00      	nop
 80024f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f6:	bc08      	pop	{r3}
 80024f8:	469e      	mov	lr, r3
 80024fa:	4770      	bx	lr
